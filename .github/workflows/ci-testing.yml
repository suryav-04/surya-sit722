name: CI - Stage 1 (Testing Branch)

on:
  push:
    branches: [ "testing" ]
  pull_request:
    branches: [ "testing" ]

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # ---------------------------
      # FRONTEND
      # ---------------------------
      - name: Set up Node.js for frontend
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install & Test frontend
        run: echo "Skipping npm install for frontend (no package.json found, static frontend only)."

      # ---------------------------
      # BACKEND
      # ---------------------------
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies for backend
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov
          pip install -r backend/customer_service/requirements.txt
          pip install -r backend/order_service/requirements.txt
          pip install -r backend/product_service/requirements.txt

      - name: Wait for Postgres to be ready
        run: |
          for i in {1..10}; do
            nc -z localhost 5432 && echo "Postgres is up!" && break
            echo "Waiting for Postgres..."
            sleep 3
          done

      # ---------------------------
      # BACKEND TESTS
      # ---------------------------
      - name: Run Customer Service tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
        run: python -m pytest backend/customer_service/tests --maxfail=1 --disable-warnings -q

      - name: Run Order Service tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
        run: python -m pytest backend/order_service/tests --maxfail=1 --disable-warnings -q

      - name: Run Product Service tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
        run: python -m pytest backend/product_service/tests --maxfail=1 --disable-warnings -q

      # ---------------------------
      # DOCKER BUILD
      # ---------------------------
      - name: Build Docker images
        run: |
          docker build -t test-frontend ./frontend
          docker build -t test-customer-service ./backend/customer_service
          docker build -t test-order-service ./backend/order_service
          docker build -t test-product-service ./backend/product_service
