name: CI - Stage 1 (Testing Branch)

on:
  push:
    branches:
      - testing

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # ---------- FRONTEND ----------
      - name: Set up Node.js for frontend
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install & Test frontend
        working-directory: ./frontend
        run: |
          if [ -f package.json ]; then
            npm install
            npm test || echo "No frontend tests found"
          else
            echo "No package.json found in frontend, skipping..."
          fi

      # ---------- BACKEND ----------
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10

      - name: Install dependencies for backend
        run: |
          pip install --upgrade pip
          pip install pytest pytest-asyncio psycopg2-binary fastapi uvicorn httpx sqlalchemy

      - name: Wait for Postgres to be ready
        run: |
          for i in {1..10}; do
            nc -z localhost 5432 && echo "Postgres is up!" && break
            echo "Waiting for Postgres..."
            sleep 3
          done

      - name: Create test databases
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d testdb -c "CREATE DATABASE customers;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d testdb -c "CREATE DATABASE orders;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d testdb -c "CREATE DATABASE products;"

      - name: Run Customer Service tests
        working-directory: ./backend/customer_service
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run Order Service tests
        working-directory: ./backend/order_service
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run Product Service tests
        working-directory: ./backend/product_service
        run: pytest tests --maxfail=1 --disable-warnings -q

      # ---------- BUILD & PUSH ----------
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR Login
        run: az acr login --name sit7229cacr123

      - name: Build Docker images
        run: |
          docker build -t sit7229cacr123.azurecr.io/frontend:latest ./frontend
          docker build -t sit7229cacr123.azurecr.io/customer_service:latest ./backend/customer_service
          docker build -t sit7229cacr123.azurecr.io/order_service:latest ./backend/order_service
          docker build -t sit7229cacr123.azurecr.io/product_service:latest ./backend/product_service

      - name: Push Docker images
        run: |
          docker push sit7229cacr123.azurecr.io/frontend:latest
          docker push sit7229cacr123.azurecr.io/customer_service:latest
          docker push sit7229cacr123.azurecr.io/order_service:latest
          docker push sit7229cacr123.azurecr.io/product_service:latest
