name: build_and_deploy_to_staging

on:
  push:
    branches: [ "testing" ]
  workflow_dispatch:

env:
  STAGING_NAMESPACE: staging
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  AKS_RG: ${{ secrets.AKS_RESOURCE_GROUP }}
  AKS_NAME: ${{ secrets.AKS_CLUSTER_NAME }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to AKS (staging)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Login to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      # Get kubectl context for your AKS
      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.AKS_RG }}
          cluster-name:  ${{ env.AKS_NAME }}
          use-kubelogin: true

      # Create (or keep) the staging namespace
      - name: Create staging namespace (idempotent)
        run: |
          kubectl get ns $STAGING_NAMESPACE >/dev/null 2>&1 || kubectl create ns $STAGING_NAMESPACE
          kubectl label ns $STAGING_NAMESPACE app=sit722 --overwrite

      # Deploy manifests
      - name: kubectl apply
        run: |
          kubectl apply -f k8s/ -n $STAGING_NAMESPACE
          echo "Current objects:"
          kubectl get deploy,po,svc -n $STAGING_NAMESPACE -o wide

      # Wait for deployments to become ready (frontend + the 3 services)
      - name: Wait for rollout
        run: |
          set -e
          for d in frontend customer-service order-service product-service; do
            echo "Waiting for deployment/$d..."
            kubectl rollout status deployment/$d -n $STAGING_NAMESPACE --timeout=180s
          done

      # Show external IP of frontend (if/when assigned)
      - name: Show frontend service external IP
        run: |
          kubectl get svc frontend -n $STAGING_NAMESPACE -o wide
          echo "If EXTERNAL-IP is <pending>, wait ~1-2 minutes and re-check: kubectl get svc frontend -n $STAGING_NAMESPACE"

      # Useful diagnostics if anything fails
      - name: Describe pods on failure
        if: failure()
        run: |
          kubectl get all -n $STAGING_NAMESPACE -o wide || true
          kubectl describe pods -n $STAGING_NAMESPACE || true
          kubectl get events -n $STAGING_NAMESPACE --sort-by=.lastTimestamp | tail -n 100 || true
